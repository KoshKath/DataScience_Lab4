# main.py
!pip install kaggle
import os
import shutil
import zipfile
import pandas as pd
import numpy as np
import file_load as fl
import data_quality as dq
import gradientboostingclassifier as gbcl
import decisiontreeclassifier as dtc
import kneighborsclassifier as knbcl
import supportvectormachine as sv
import quadraticdiscriminantanalysis as qda

# загрузка датасета из источника
#https://www.kaggle.com/datasets/ganiyuolalekan/spam-assassin-email-classification-dataset
# определение пути источника и назначения
source_path = 'kaggle.json'
destination_dir = os.path.expanduser('~/.kaggle')
destination_path = os.path.join(destination_dir, 'kaggle.json')
# создание директорию назначения, если она не существует
os.makedirs(destination_dir, exist_ok=True)
# перемещение файл
shutil.move(source_path, destination_path)
# устанавление прав доступа
os.chmod(destination_path, 0o600)

!kaggle datasets download -d ganiyuolalekan/spam-assassin-email-classification-dataset

# распаковка скачанного архива
with zipfile.ZipFile('spam-assassin-email-classification-dataset.zip', 'r') as zip_ref:
  zip_ref.extractall('spam-assassin-email-classification-dataset')
# просмотр файлов в директории
print('Файлы в директории:')
print(os.listdir('spam-assassin-email-classification-dataset'))

ds_path = 'spam-assassin-email-classification-dataset/spam_assassin.csv'
df = fl.data_load(ds_path)

X = df.text
y = df.target

# распредление классов
unique, counts = np.unique(y, return_counts=True)
class_distribution = dict(zip(unique, counts))
print("Распределение классов:", class_distribution)

dq.data_quality(df)

# GradientBoostingClassifier
print('1. -- Результаты GradientBoostingClassifier --')
gbcl.gradientboostingclassifier(df, X, y)
print('-----------------////////-------------------')

# DecisionTreeClassifier
print('2. -- Результаты DecisionTreeClassifier --')
dtc.decisiontreeclassifier(df, X, y)
print('-----------------////////-------------------')

# KNeighborsClassifier
print('3. -- Результаты KNeighborsClassifier --')
knbcl.kneighborsclassifier(df, X, y)
print('-----------------////////-------------------')

# SVM
print('4. -- Результаты Support Vector Machine --')
sv.supportvectormachine(df, X, y)
print('-----------------////////-------------------')

# QDA
print('5. -- Результаты QuadraticDiscriminantAnalysis --')
qda.quadraticdiscriminantanalysis(df, X, y)
print('-----------------////////-------------------')